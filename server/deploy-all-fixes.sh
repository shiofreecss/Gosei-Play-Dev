#!/bin/bash

# ===================================================================
# Gosei Deploy All Fixes - Wrapper Script
# ===================================================================
# This script ensures all critical fixes are deployed and verified:
# 1. Socket.IO sticky sessions for load balancing
# 2. Redis adapter for true scalability
# 3. Server-side Redis integration
# 4. Production optimizations
# 5. SSL and security enhancements
# ===================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
DOMAIN="gosei-svr-01.beaver.foundation"

# Script start
clear
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${PURPLE}    üöÄ Gosei Deploy ALL FIXES - Complete Solution${NC}"
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}This script deploys ALL critical fixes for production readiness${NC}"
echo -e "${PURPLE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

# Functions for output
print_header() {
    echo ""
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë${NC} ${1} ${BLUE}‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Pre-deployment checks
check_fixes_ready() {
    print_header "üîç PRE-DEPLOYMENT CHECKS"
    
    print_status "Checking if main deploy script exists..."
    if [ ! -f "./deploy.sh" ]; then
        print_error "Main deploy.sh script not found!"
        exit 1
    fi
    print_success "Main deploy script found"
    
    print_status "Checking if server Redis integration is present..."
    if grep -q "setupRedisAdapter" "./server/server.js"; then
        print_success "Server Redis adapter integration found"
    else
        print_error "Server Redis adapter integration missing!"
        exit 1
    fi
    
    print_status "Checking if Redis dependencies are in package.json..."
    if grep -q "redis-adapter" "./server/package.json"; then
        print_success "Redis dependencies found in package.json"
    else
        print_error "Redis dependencies missing from package.json!"
        exit 1
    fi
    
    print_status "Checking sticky sessions configuration in deploy script..."
    if grep -q "gosei_socketio" "./deploy.sh"; then
        print_success "Sticky sessions configuration found"
    else
        print_error "Sticky sessions configuration missing!"
        exit 1
    fi
    
    print_success "All pre-deployment checks passed!"
}

# Execute main deployment
run_deployment() {
    print_header "üöÄ EXECUTING MAIN DEPLOYMENT"
    
    print_status "Making deploy script executable..."
    chmod +x ./deploy.sh
    
    print_status "Starting main deployment with all fixes..."
    echo -e "${YELLOW}Note: This will run the complete deployment process${NC}"
    echo -e "${YELLOW}Including user creation, system setup, and all fixes${NC}"
    echo ""
    
    # Execute the main deployment script
    ./deploy.sh "$@"
}

# Post-deployment verification
verify_fixes() {
    print_header "‚úÖ VERIFYING ALL FIXES"
    
    print_status "Checking nginx configuration for sticky sessions..."
    if sudo nginx -t &>/dev/null; then
        print_success "Nginx configuration is valid"
        
        if sudo grep -q "gosei_socketio" /etc/nginx/sites-available/${DOMAIN} 2>/dev/null; then
            print_success "‚úÖ SOCKET.IO STICKY SESSIONS: Configured correctly"
        else
            print_warning "‚ö†Ô∏è  Socket.IO sticky sessions not found in nginx config"
        fi
    else
        print_error "‚ùå Nginx configuration test failed"
    fi
    
    print_status "Checking Redis service status..."
    if sudo systemctl is-active redis-server &>/dev/null; then
        print_success "‚úÖ REDIS SERVICE: Running correctly"
        
        # Test Redis connection
        if redis-cli -a "gosei_redis_secret_2024" ping 2>/dev/null | grep -q "PONG"; then
            print_success "‚úÖ REDIS CONNECTION: Working correctly"
        else
            print_warning "‚ö†Ô∏è  Redis connection test failed"
        fi
    else
        print_error "‚ùå Redis service not running"
    fi
    
    print_status "Checking PM2 processes..."
    if command -v pm2 &>/dev/null; then
        PM2_STATUS=$(pm2 list --json 2>/dev/null | jq -r '.[].name' 2>/dev/null || echo "")
        if [ -n "$PM2_STATUS" ]; then
            print_success "‚úÖ PM2 PROCESSES: Running correctly"
        else
            print_warning "‚ö†Ô∏è  No PM2 processes found"
        fi
    else
        print_warning "‚ö†Ô∏è  PM2 not installed or not in PATH"
    fi
    
    print_status "Testing Socket.IO endpoint..."
    if curl -sI https://${DOMAIN}/socket.io/ 2>/dev/null | grep -q "200\|404"; then
        print_success "‚úÖ SOCKET.IO ENDPOINT: Accessible"
    else
        print_warning "‚ö†Ô∏è  Socket.IO endpoint test failed"
    fi
    
    print_status "Checking SSL certificate..."
    if [ -f "/etc/letsencrypt/live/${DOMAIN}/fullchain.pem" ]; then
        print_success "‚úÖ SSL CERTIFICATE: Installed correctly"
    else
        print_warning "‚ö†Ô∏è  SSL certificate not found"
    fi
}

# Display fix summary
show_fix_summary() {
    print_header "üìã DEPLOYED FIXES SUMMARY"
    
    echo -e "${GREEN}The following critical fixes have been deployed:${NC}"
    echo ""
    echo -e "${CYAN}üîß Socket.IO Load Balancing Fix:${NC}"
    echo -e "   ‚Ä¢ Sticky sessions configured in nginx"
    echo -e "   ‚Ä¢ Fixes 'game not found' error with multiple browsers"
    echo -e "   ‚Ä¢ IP-hash ensures same backend per client"
    echo ""
    echo -e "${CYAN}‚ö° Redis Scaling Solution:${NC}"
    echo -e "   ‚Ä¢ Redis adapter integrated in server code"
    echo -e "   ‚Ä¢ Enables true horizontal scaling"
    echo -e "   ‚Ä¢ Shared state across multiple instances"
    echo ""
    echo -e "${CYAN}üõ°Ô∏è Production Security:${NC}"
    echo -e "   ‚Ä¢ SSL/TLS with Let's Encrypt"
    echo -e "   ‚Ä¢ Enhanced security headers"
    echo -e "   ‚Ä¢ Rate limiting and DDoS protection"
    echo ""
    echo -e "${CYAN}üìä Monitoring & Health Checks:${NC}"
    echo -e "   ‚Ä¢ Automated health monitoring every 5 minutes"
    echo -e "   ‚Ä¢ Service restart on failure"
    echo -e "   ‚Ä¢ Comprehensive logging"
    echo ""
    echo -e "${YELLOW}üß™ Test Your Deployment:${NC}"
    echo -e "${CYAN}1. Browser A: Create game at https://${DOMAIN}${NC}"
    echo -e "${CYAN}2. Browser B: Join same game with code${NC}"
    echo -e "${CYAN}3. Browser C: Join same game with code${NC}"
    echo -e "${CYAN}4. Result: All should work WITHOUT errors!${NC}"
    echo ""
    echo -e "${GREEN}üéâ Your Gosei server is now production-ready with ALL FIXES!${NC}"
}

# Main execution
main() {
    print_status "Starting complete fix deployment at $(date)"
    
    # Run all steps
    check_fixes_ready
    run_deployment "$@"
    
    # Wait a bit for services to stabilize
    print_status "Waiting for services to stabilize..."
    sleep 10
    
    verify_fixes
    show_fix_summary
    
    print_header "üéâ ALL FIXES DEPLOYED SUCCESSFULLY!"
    
    echo -e "${GREEN}Your Gosei server is ready for production use!${NC}"
    echo -e "${CYAN}‚Ä¢ All critical fixes applied ‚úÖ${NC}"
    echo -e "${CYAN}‚Ä¢ Socket.IO scaling issues resolved ‚úÖ${NC}"
    echo -e "${CYAN}‚Ä¢ Redis integration complete ‚úÖ${NC}"
    echo -e "${CYAN}‚Ä¢ Security enhancements active ‚úÖ${NC}"
    echo -e "${CYAN}‚Ä¢ Monitoring systems operational ‚úÖ${NC}"
    
    print_status "Deployment completed at $(date)"
}

# Check if running with help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: $0 [options]"
    echo ""
    echo "This script deploys all critical fixes for the Gosei production server:"
    echo "‚Ä¢ Socket.IO sticky sessions (fixes 'game not found' errors)"
    echo "‚Ä¢ Redis adapter for true scalability"
    echo "‚Ä¢ Production security and SSL"
    echo "‚Ä¢ Monitoring and health checks"
    echo ""
    echo "Options:"
    echo "  --skip-user-creation    Skip user creation (if running as existing user)"
    echo "  --help, -h             Show this help message"
    echo ""
    echo "Example:"
    echo "  sudo $0                 # Full deployment (creates user)"
    echo "  $0 --skip-user-creation # Skip user creation"
    exit 0
fi

# Run main deployment
main "$@" 